#! /bin/bash

set -e

SESSION='pista'
BASE_DIR="$HOME/.pista-in"

# Now that volume is switched from polling to reacting to change events - we
# need a long TTL, until pista implements infinity TTLs:
TTL_VOLUME=$(( 60 * 60 ))

tmux_new_win() {
    # Have to pass the window id because incrementing a global is futile, since
    # tmux_new_win will be called from a new process each time and a global's
    # value will be reset.
    local -r win="$1"
    local -r cmd="$2"

    echo "[debug] win:\"$win\" cmd:\"$cmd\"" >&2
    tmux new-window -t "$SESSION"
    tmux send-keys  -t "$SESSION":"$win".0 "$cmd" ENTER
}

start_sensor() {
    local -r win="$1"
    local -r exe="$2"
    shift 2
    local -r arg="$*"
    local -r fifo="$BASE_DIR/$exe"

    rm -f "$fifo"
    mkfifo "$fifo"
    tmux_new_win "$win" "$exe $arg > $fifo; notify-send -u critical 'pista-sensor exited!' \"$exe\n\$?\""
    echo "$fifo"
}

_start() {
    local -r wifi_if=$(iwconfig | grep -v '^lo' | awk '/^[^\ ]/ {print $1}')

    tmux new-session -d -s "$SESSION"

    # Have to increment window ids manually, because an increment operation
    # would be executed local to each subprocess if I did something like:
    #     $(start_sensor $((win++)) pista-sensor-foo)
    tmux_new_win \
        0 \
        "pista \
        -l 0 \
        -i 0.5 \
        -s '  ' \
        -x \
        $(start_sensor  1  pista-sensor-upower)            11 120  \
        $(start_sensor  2  pista-sensor-wifi $wifi_if 5)    8  10  \
        $(start_sensor  3  pista-sensor-bluetooth)          9  10  \
        $(start_sensor  4  pista-sensor-backlight)         10   5  \
        $(start_sensor  5  pista-sensor-volume)             8   $TTL_VOLUME  \
        $(start_sensor  6  pista-sensor-mpd)               17   5  \
        $(start_sensor  7  pista-sensor-weather-gov \
                             -n \
                             -i $(( 30 * 60 )) KJFK)        8   $(( 30 * 60 )) \
        $(start_sensor  8  pista-sensor-time)              21   2"
}

_stop() {
    tmux kill-session -t "$SESSION"
}

_restart() {
    _stop || true
    _start
}

_attach() {
    tmux attach -t "$SESSION"
}

main() {
    local -r cmd="$1"
    cd "$BASE_DIR"
    case "$cmd" in
        'start') _start;;
        'stop') _stop;;
        'restart') _restart;;
        'attach') _attach;;
        *)
            echo "[error] Unknown command: \"$cmd\". Known: start|stop|restart|attach"
            exit 1;;
    esac
}

main "$*"
